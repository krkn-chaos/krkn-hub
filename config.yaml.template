kraken:
    distribution: $DISTRIBUTION                                # Distribution can be kubernetes or openshift
    kubeconfig_path: $KRKN_KUBE_CONFIG                   # Path to kubeconfig
    exit_on_failure: False                                 # Exit when a post action scenario fails
    port: $PORT
    publish_kraken_status: $PUBLISH_KRAKEN_STATUS
    signal_state: $SIGNAL_STATE                            # Will wait for the RUN signal when set to PAUSE before running the scenarios
    signal_address: $SIGNAL_ADDRESS                        # Signal listening address
    chaos_scenarios:                                       # List of policies/chaos scenarios to load
        - $SCENARIO_TYPE:                                  # List of chaos time scenarios to load
            - $SCENARIO_FILE
cerberus:
    cerberus_enabled: $CERBERUS_ENABLED                    # Enable it when cerberus is previously installed
    cerberus_url: $CERBERUS_URL                            # When cerberus_enabled is set to True, provide the url where cerberus publishes go/no-go signal
    check_applicaton_routes: False                         # When enabled will look for application unavailability using the routes specified in the cerberus config and fails the run

performance_monitoring:
    deploy_dashboards: $DEPLOY_DASHBOARDS                 # Install a mutable grafana and load the performance dashboards. Enable this only when running on OpenShift
    repo: "https://github.com/cloud-bulldozer/performance-dashboards.git"
    capture_metrics: $CAPTURE_METRICS
    metrics_profile: $METRICS_PATH
    prometheus_url:                                       # The prometheus url/route is automatically obtained in case of OpenShift, please set it when the distribution is Kubernetes.
    prometheus_bearer_token:                              # The bearer token is automatically obtained in case of OpenShift, please set it when the distribution is Kubernetes. This is needed to authenticate with prometheus.
    uuid: $UUID                                           # uuid for the run is generated by default if not set
    enable_alerts: $ENABLE_ALERTS                         # Runs the queries specified in the alert profile and displays the info or exits 1 when severity=error
    alert_profile: $ALERTS_PATH                           # Path to alert profile with the prometheus queries
    check_critical_alerts: $CHECK_CRITICAL_ALERTS         # When enabled will check prometheus for critical alerts firing post chaos

tunings:
    wait_duration: $WAIT_DURATION                          # Duration to wait between each chaos scenario
    iterations: $ITERATIONS                                # Number of times to execute the scenarios
    daemon_mode: $DAEMON_MODE                              # Iterations are set to infinity which means that the kraken will cause chaos forever

telemetry:
    enabled: $TELEMETRY_ENABLED                             # enable/disables the telemetry collection feature
    api_url: $TELEMETRY_API_URL                             # telemetry service endpoint
    username: $TELEMETRY_USERNAME                           # telemetry service username
    password: $TELEMETRY_PASSWORD                           # telemetry service password
    prometheus_backup: $TELEMETRY_PROMETHEUS_BACKUP         # enables/disables prometheus data collection
    full_prometheus_backup: $TELEMETRY_FULL_PROMETHEUS_BACKUP  # if is set to False only the /prometheus/wal folder will be downloaded.
    backup_threads: $TELEMTRY_BACKUP_THREADS                   # number of telemetry download/upload threads
    archive_path: $TELEMETRY_ARCHIVE_PATH                      # local path where the archive files will be temporarly stored
    max_retries: $TELEMETRY_MAX_RETRIES                        # maximum number of upload retries (if 0 will retry forever)
    telemetry_group: $TELEMETRY_GROUP                          # if set will archive the telemetry in the S3 bucket on a folder named after the value, otherwise will use "default"
    run_tag: $TELEMETRY_RUN_TAG                                # if set, this will be appended to the run folder in the bucket (useful to group the runs)
    archive_size: $TELEMETRY_ARCHIVE_SIZE                       # the size of the prometheus data archive size in KB. The lower the size of archive is
    logs_backup: $TELEMETRY_LOGS_BACKUP
    logs_filter_patterns: $TELEMETRY_FILTER_PATTERN
    oc_cli_path: $TELEMETRY_CLI_PATH                             # optional, if not specified will be search in $PATH
    events_backup: $TELEMETRY_EVENTS_BACKUP

elastic:
    enable_elastic: $ENABLE_ES
    verify_certs: $ES_VERIFY_CERTS
    elastic_url: "$ES_SERVER"                                         # To track results in elasticsearch, give url to server here; will post telemetry details when url and index not blank
    elastic_port: $ES_PORT
    username: "$ES_USERNAME"
    password: "$ES_PASSWORD"
    metrics_index: "$ES_METRICS_INDEX"
    alerts_index: "$ES_ALERTS_INDEX"
    telemetry_index: "$ES_TELEMETRY_INDEX"
